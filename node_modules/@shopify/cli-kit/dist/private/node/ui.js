import { isUnitTest } from '../../environment/local.js';
import { collectLog, consoleLog, outputWhereAppropriate } from '../../output.js';
import Prompt from '../../private/node/ui/components/Prompt.js';
import React from 'react';
import { render as inkRender } from 'ink';
import { EventEmitter } from 'events';
export function renderOnce(element, logLevel = 'info', logger = consoleLog) {
    const { output, unmount } = renderString(element);
    if (output) {
        if (isUnitTest())
            collectLog(logLevel, output);
        outputWhereAppropriate(logLevel, logger, output);
    }
    unmount();
}
export function render(element, options) {
    const { waitUntilExit } = inkRender(element, options);
    return waitUntilExit();
}
const TEST_TERMINAL_WIDTH = 80;
class OutputStream extends EventEmitter {
    constructor(options) {
        super();
        this.write = (frame) => {
            this._lastFrame = frame;
        };
        this.lastFrame = () => {
            return this._lastFrame;
        };
        this.columns = options.columns;
    }
}
export const renderString = (element) => {
    const stdout = new OutputStream({ columns: isUnitTest() ? TEST_TERMINAL_WIDTH : process.stdout.columns });
    const stderr = new OutputStream({ columns: isUnitTest() ? TEST_TERMINAL_WIDTH : process.stderr.columns });
    const instance = inkRender(element, {
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        stdout: stdout,
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        stderr: stderr,
        debug: true,
        exitOnCtrlC: false,
        patchConsole: false,
    });
    return {
        output: stdout.lastFrame(),
        unmount: instance.unmount,
    };
};
export async function prompt(options) {
    let onChooseResolve = () => { };
    const onChoosePromise = new Promise((resolve) => {
        onChooseResolve = resolve;
    });
    const props = {
        ...options,
        onChoose: onChooseResolve,
    };
    await render(React.createElement(Prompt, { ...props }), { exitOnCtrlC: false });
    return onChoosePromise;
}
//# sourceMappingURL=ui.js.map